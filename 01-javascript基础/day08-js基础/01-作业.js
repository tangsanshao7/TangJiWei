// // 1. 1-100之间所有数的总和 与 平均值
// var sum=0;
// for (var i=1;i<=100;i++){
//     sum+=i
// }

// console.log(sum);
// console.log(sum/(i-1));


// // 2. 1-100之间所有偶数的和
// var sum=0;
// for (var i=1;i<=100;i++){
//      if (i%2==0) {
//          sum+=i
//      }
// }
// console.log(sum);


// // 3. 100以内7的倍数的总和
// var sum=0;
// for (var i=1;i<=100;i++){
//      if (i%7==0) {
//          sum+=i
//      }
// }
// console.log(sum);

// // 4. 利用JavaScript完成如下九九乘法表
// for (var i = 1; i <= 9; i++) {

//     for (var j = 1; j <= i; j++) {
//         console.log(j + '*' + i + '=' + i * j);
//     }


// }



// // 5. 用户输入一个数字，列出所有它能够整除的数字。
// var num =100;
// for(var i=1;i<num;i++){
//     if (num%i==0) {
//         console.log(i);
//     }
// }

// // 6. 利用JavaScript求：1+2+3+…+100的和
// var sum=0;
// for (var i=1;i<=100;i++){
//     sum+=i
// }
// console.log(sum);


// // 7. 利用JavaScript完成如下功能：要求在1~1000数字之中，找出所有能被5整除，或者被6整除的数字，并在控制台输出这些数字

// for (var i = 1; i <= 1000; i++) {
//     if (i%5==0||i%6==0) {
//         console.log(i);
//     }
// }

      // 8. 打印一个 5行4列的矩形




// 9. 利用JavaScript完成输出如下图形（由“空格”和“*”这两种符号组成）（拔高题）
//         * 
//        * * 
//       * * * 
//      * * * * 
//     * * * * * 


// 10. 利用JavaScript，使用循环语句输出如下菱形图案（由“-”和“*”这两种符号组成） （拔高题）

//      ---*
//      --***
//      -*****
//      *******
//      -*****
//      --***
//      ---*


// // 11.利用JavaScript完成输出如下图形（由“空格”和“*”这两种符号组成）
// //      55555
// //      4444
// //      333
// //      22
// //      1
// //      22
// //      333
// //      4444
// //      55555

// for (var i = 5; i > 0; i--) {
//     var str = "";
//     for (var j = 0; j < i; j++) {
//       str += i;
//     }
//     console.log(str);
//   }
//   for (var k = 2; k < 5 + 1; k++) {
//     var str2 = "";
//     for (var l = 0; l < k; l++) {
//       str2 += k;
//     }
//     console.log(str2);
//   }


// 12.利用JavaScript完成输出如下图形（由“空格”和“*”这两种符号组成）
//      *                      *********
//      ***                   *******
//      *****                *****
//      *******             ***      
//      *********          *  
